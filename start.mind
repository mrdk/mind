\ mind -- a Forth interpreter					. o ( mind )
\ Copyright 2011-2013 Markus Redeker <cep@ibp.de>
\
\ Published under the GNU General Public License version 2 or any
\ later version, at your choice. There is NO WARRANY, not at all. See
\ the file "copying" for details.

\ At the beginning of each section (a section is marked by "==") there
\ is a list of the words that are defined in the section and belong to
\ the mind language proper.

\ == Bootstrapping of colon definitions ==
\ immediate Alias : ; (')

:, 'last ( -- xt )    ] last @ link>  ;; [
:, immediate          ] 'last dup flags@  #immediate or  swap flags! ;; [

:, Alias ( xt -- )    ] ^dodefer Create,  'last >doer ! ;; [

:, (')  ( <word> -- xt | 0 )    ] parse find ;; [

\ Create an alias for ?pairs so that it can be defined later.
(') 2drop Alias ?pairs ( n1 n2 -- )

:, : ( <word> cf -- )    ] :,  1 state !   lit :  ;; [
:, ; ( cf -- )           ] lit : ?pairs
                           lit ;; ,   0 state !  ;; [  immediate


\ == Constant-like words ==
\ Create does> Variable Constant

: Create ( <word> -- )   ^dovar Create, ;
: does>                  ^dodoes 'last !   r> 'last >doer ! ;

: Variable ( <word> -- )     Create  /cell allot ;
: Constant ( <word> n -- )   Create ,  does> @ ;


\ == Literals ==
\ '

\ create { ' lit | n } in code.
: literal, ( n -- )   lit lit ,  , ;

(') literal, Alias literal ( n -- )  immediate
(') drop     Alias ?exists ( xt -- ) \ abort if word does not exist

: '  ( <word> -- xt )                  (')  dup ?exists ;
\ Compile the XT of the following word
: [']  ( -- xt; Compile: <word> -- )   ' literal, ;  immediate
\ Compile the following word
: [compile]   ( Compile: <word> -- )   ' , ;  immediate


\ == Control structures: building blocks ==

: >mark    ( -- a )	align  here 0 , ;
: >resolve ( a -- )	align  here swap ! ;

: <mark    ( -- a )	align here ;
: <resolve ( a -- )	, ;


\ == Control structures: conditionals ==
\ if, else, then, IF ELSE THEN

: if,   ( -- addr )         ['] 0branch ,  >mark ;
: else, ( addr1 -- addr2 )  ['] branch ,   >mark  swap >resolve ;
: then, ( addr -- )         >resolve ;

: IF   ( -- addr cf )
  if,  ['] if, ;  immediate
: ELSE ( addr1 cf1 -- addr2 cf2 )
  ['] if, ?pairs  else,  ['] else, ;  immediate

: ?then ( cf -- )               \ Are we inside an IF-ELSE-THEN structure?
  dup ['] if, <> [ if, ] ['] else, ?pairs [ else, ] drop [ then, ] ;
: THEN ( addr cf -- )
  ?then then, ;  immediate


\ == Control structures: loops ==
\ begin, while, repeat, BEGIN WHILE REPEAT

: begin,  ( -- a )        <mark ;
: while,  ( a -- a' a )   if, swap ;
: repeat, ( a -- )        ['] branch ,  <resolve ;

: BEGIN ( -- 0 a )
  0  begin,  ['] begin, ;  immediate
: WHILE ( a -- a' a )
  ['] begin, ?pairs  while,  ['] begin, ;  immediate
: REPEAT ( 0 a'1 ... a'n a -- )
  ['] begin, ?pairs  repeat,
  [ begin, ]  0;  then, [ repeat, ] ;  immediate


\ == Number comparison ==
\ min max

: within+  ( n n0 n1 -- flag )	1+ within ; \ true if n0 <= n <= n1

: ?nip ( n1 n2 flag -- n3 ) IF nip ELSE drop THEN ;
: max ( n1 n2 -- n3 )   2dup <  ?nip ; \ Maximum of n1 and n2
: min ( n1 n2 -- n3 )   2dup >  ?nip ; \ Minimum of n1 and n2


\ == Inlined strings ==
\ (.") (") ." "

\ data structure: { ' 'inlined | ' end | data ... | }
\ return address of data following in code, relative to the word
\ calling `'inlined`
: 'inlined ( -- addr )   rr> dup @ >rr  cell+ ;

: (.")  ( -- )       'inlined puts ; \ Print inlined string
: (")   ( -- addr )  'inlined ;      \ Address of inlined string

: Stringlit ( xt -- )   Create ,  immediate  does>  @ ,  >mark  ," >resolve ;

' (.") Stringlit ."
' (")  Stringlit  "


\ == Characters ==

: char   ( "char" -- c )        \  Ascii (or other) code for "char"
  parse c@ ;
: [char] ( -- c; Compile: "char" -- ) \ Compile code for "char"
  char literal, ;  immediate

: space    bl emit ;            \ Print a single space
: spaces  ( n -- )              \ Print n spaces
  0 max  BEGIN  ?dup WHILE 1- space REPEAT ;


\ == Debug tools ==
\ no-defer Defer is

: .abort    ( str -- )	       ." Abort: "  here puts  space  puts  cr ;
: do-abort  ( flag str -- )    swap IF  .abort abort  ELSE drop THEN ;
: (abort")  ( flag -- )        'inlined do-abort ;
' (abort") Stringlit abort"

: no-defer   true abort" undefined Defer" ;
: Defer ( <word> -- )      ['] no-defer Alias ;
: is    ( xt <word> -- )   ' >doer ! ;

: (?pairs)  ( n1 n2 -- )    <> abort" Mismatching control structure" ;
' (?pairs) is ?pairs


\ == Conversion: string to number ==

Variable base                   \ Base for number conversion.

Variable #acc                   \ Number accumulator
: accumulate ( n -- )           \ Put n as new last digit into #acc
  #acc @  base @ * +  #acc ! ;

: digit?   ( n -- ? )	base @ u< ; \ is n a digit under the current base?
: digit>#  ( char -- n ? )
  dup  [char] 0 [char] 9 within+  IF  [char] 0 -  dup digit? ;; THEN
  dup  [char] a [char] z within+  IF  [char] a -
                [ char 9 char 0 - 1+ ] literal +  dup digit? ;; THEN
  false ;

: udigits  ( str -- str' )      \ accumulate unsigned digits as long as possible
  BEGIN dup c@  digit># IF accumulate ELSE drop ;; THEN  1+ REPEAT ;
: ?rest    ( str -- )           \ abort if there are unconverted characters
  c@ abort" not found" ;
: >unumber ( str -- n )         \ convert string to unsigned number
  0 #acc !  udigits ?rest  #acc @ ;

: get-sign ( str -- a' sign )   \ read leading minus sign if it is there
  dup c@  [char] - =  IF 1+  -1 ELSE 1 THEN ;
: >number  ( str -- n )         \ convert string to signed number
  get-sign swap  >unumber  * ;


\ Add number conversion to the outer interpreter

: convert-number             \ Convert number at `here`, compile it if necessary
  here >number  state @ IF literal, THEN ;

' convert-number word? !        \ Activate number conversion

2 base !
1010 base !   \ going decimal


\ ==== Now the bootstrapping of the language is complete ======================

\ == Data structures ==
\ on off cells

: on  ( addr -- )   true swap ! ;
: off ( addr -- )   false swap ! ;

: cells ( n -- n' )   /cell * ;


\ == Control flow ==

: perform ( `xt -- )   @ execute ;

: later   rr> >r ;
: push ( addr -- )       \ Save content of addr during execution of current word
  dup >rr @ >rr  later  r> r> ! ;


\ == Conversion: numbers to string (Modified f.i.g. model.) ==

\ Allocate for a zero-terminated string of maximal length *n*
: strallot ( n -- )   1+ allot ;

128 Constant /numbuf
Create numbuf  /numbuf strallot
Variable 'num                  \ points to the beginning of the generated string

: #>digit ( n - char )
  dup 10 <  IF [char] 0 +  ELSE  10 - [char] a +  THEN ;

: hold   ( char -- )  -1 'num +!   'num @  c! ;
: hold-sign ( n -- )   0< IF  [char] - hold  THEN ;

: <#	            numbuf /numbuf + 'num !   0 hold ;
: # ( u -- u')	    base @ u/mod  #>digit hold ;
: #s ( u -- )	    BEGIN  ?dup WHILE  # REPEAT ;
: #> ( -- addr )    'num @ ;


\ == Number conversion ==

: (u.)  ( u -- addr )    <# # #s #> ;
: u.    ( u -- )    (u.) puts space ;
: (.)   ( n -- addr )    dup abs  <# # #s hold-sign #> ;
: .     ( n -- )    (.)  puts space ;

: binary     2 base ! ;
: octal      8 base ! ;
: decimal   10 base ! ;
: hex       16 base ! ;

: h.    ( n -- )   base push  hex . ;


\ == Line input ==
\ accept

: ?split   ( addr c -- )     \ if character at `addr` is `c`, split string there
  over c@ = IF  0 swap c!  ELSE drop THEN ;
: chomp  ( str -- )             \ remove trailing end-of-line character.
  dup strlen + 1-  #eol  ?split ;

: accept  ( addr n -- n' )
  over swap  1+ gets IF  dup chomp strlen ELSE  0 swap c!  drop 0 THEN ;

256 Constant /linebuf
Create linebuf  /linebuf strallot


\ == Text Streams and String Streams ==

: Textstream ( <word> -- )   Create /textstream allot ;

: Field  ( offset size <word> -- offset' )   Create over ,  +
  does>  ( 'base -- 'field )                 @ + ;

/textstream
  /cell Field >'current-char         \ points to the current character
Constant /stringstream

: strstream-forward   ( 'stream -- )        >'current-char  1 swap +! ;
: strstream-current@  ( 'stream -- char )   >'current-char @ c@ ;
: strstream-eos       ( 'stream -- flag )   strstream-current@ 0= ;

: Stringstream ( <word> -- )
  Create here  /stringstream allot
  ['] strstream-forward  over >forward !
  ['] strstream-current@ over >current@ !
  ['] strstream-eos      over >eos !
  drop ;

: interpret-stream ( 'string 'stream -- )
  'instream push  dup 'instream !  >'current-char !  do-stream ;

Stringstream line-stream

: line-interpret
  BEGIN  linebuf /linebuf accept drop
         linebuf line-stream interpret-stream
         ." ok" cr  REPEAT ;


\ == Command interpreter ==
\ clearstack

Variable start-finished		\ Has start-command been executed?
start-finished off

: clearstack s0 @ sp! ;

: command-interpret
  clearstack  r0 @ rp!
  start-command @  start-finished @ or IF  start-finished off
      start-command @ line-stream interpret-stream  THEN
  interactive-mode @ IF
      line-interpret ELSE bye THEN ;

' command-interpret is abort


\ == Debug and Display ==

\ Number of entries on the stack
: depth ( -- n )    sp@  s0 @  swap -  /cell / ;
: ?stack            depth 0< abort" Stack empty" ;

: .s                            \ print content of stack
  ?stack  sp@ >r  s0 @  BEGIN cell-  dup r@ u>= WHILE  dup @ h. REPEAT
  drop rdrop ;

: .name   ( xt -- )   >name puts ;
: words   last  BEGIN @  ?dup WHILE  dup link> .name space  REPEAT ;


\ Local Variables:
\ comment-start: "\\ "
\ End: